package com.ProductDetails.controller;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.ProductDetails.kafka.productDetailsProducer;
import com.ProductDetails.model.ProductDetails;
import com.ProductDetails.model.userbill;
import com.ProductDetails.service.ProductServices;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
public class ProductDetailsController {

	@Autowired
	private ProductServices productServices;

	@Autowired
	private productDetailsProducer producer;


	// Save data and generate bill with exception(if email same not allowed)
//	@PostMapping("/saveProductDetails")
//	public ResponseEntity<userbill> saveData(@RequestBody ProductDetails productDetails) throws Exception {
//	    // Calculate priceWithGST and totalBill
//	    double priceWithGST = productDetails.getPrice() * (productDetails.getGst() / 100);
//	    double totalBill = productDetails.getPrice() + priceWithGST;
//
//	    // Set the calculated values in the ProductDetails object
//	    productDetails.setPriceWithGST(priceWithGST);
//	    productDetails.setTotalBillRs(totalBill + " Rs");
//
//	    // Check if the email ID already exists in the database
//	    String tempEmailId = productDetails.getEmailId();
//	    if (tempEmailId != null && !"".equals(tempEmailId)) {
//	        ProductDetails pro = productServices.fetchProductDetailsByEmailId(tempEmailId);
//	        if (pro != null) {
//	            throw new Exception("Email ID already exists in the database");
//	        }
//	    }
//
//	    // Save the modified productDetails object
//	    ProductDetails savedProduct = productServices.saveProductData(productDetails);
//
//	    // Create a response with the same ProductDetails
//	    userbill bill = new userbill("Bill generated by producer", savedProduct);
//
//	    // You can also send this data to Kafka if needed
//	    producer.sendMessage(bill);
//
//	    return ResponseEntity.ok().body(bill);
//	}

	//save data
	@PostMapping("/saveProductDetails")
	public ResponseEntity<userbill> saveData(@RequestBody ProductDetails productDetails) throws Exception {
	    // Calculate priceWithGST and totalBill
	    double priceWithGST = productDetails.getPrice() * (productDetails.getGst() / 100);
	    double totalBill = productDetails.getPrice() + priceWithGST;

	    // Set the calculated values in the ProductDetails object
	    productDetails.setPriceWithGST(priceWithGST);
	    productDetails.setTotalBillRs(totalBill + " Rs");

	    // Save the modified productDetails object
	    ProductDetails savedProduct = productServices.saveProductData(productDetails);

	    // Create a response with the same ProductDetails
	    userbill bill = new userbill("Bill generated by producer", savedProduct);

	    // You can also send this data to Kafka if needed
	    producer.sendMessage(bill);

	    return ResponseEntity.ok().body(bill);
	}
	


	// get all
	@GetMapping("/getallproducts")
	public ResponseEntity<List<ProductDetails>> getall() {
		return ResponseEntity.ok().body(productServices.getAllProduct());
	}

	// get by product id
	@GetMapping("/getbyproductid/{productId}")
	public ResponseEntity<Optional<ProductDetails>> getByproductId(@PathVariable String productId) {
		return ResponseEntity.ok().body(productServices.getByProductId(productId));

	}

	// get by email id
//	@GetMapping("/getuserbill/{emailId}")
//    public ResponseEntity<userbill> getUserBillByEmailId(@PathVariable String emailId) {
//        // Fetch the user's bill details based on the email ID
//        ProductDetails productDetails = productServices.fetchProductDetailsByEmailId(emailId);
//
//        if (productDetails != null) {
//            // Calculate priceWithGST and totalBill
//            double priceWithGST = productDetails.getPriceWithGST();
//            String totalBillRs = productDetails.getTotalBillRs();
//
//            // Create a userbill object with the calculated values
//            userbill bill = new userbill("Bill generated by producer", productDetails);
//            bill.getProductDetails().setPriceWithGST(priceWithGST);
//            bill.getProductDetails().setTotalBillRs(totalBillRs);
//
//            return ResponseEntity.ok().body(bill);
//        } else {
//            return ResponseEntity.notFound().build();
//        }
//    }
	
	
//	@GetMapping("/getproductbyemailid/{emailId}")
//	public ResponseEntity<ProductDetails> getByUserId(@PathVariable String emailId) {
//		return ResponseEntity.ok().body(productServices.fetchProductDetailsByEmailId(emailId));
//	}
	
	@GetMapping("/getproductbyemailid/{emailId}")
	public ResponseEntity<List<ProductDetails>> getByUserId(@PathVariable String emailId) {
	    List<ProductDetails> productDetailsList = productServices.fetchProductDetailsByEmailId(emailId);
	    
	    if (productDetailsList.isEmpty()) {
	        return ResponseEntity.notFound().build();
	    }
	    
	    return ResponseEntity.ok().body(productDetailsList);
	}

	



	




	// delete by email id
	@DeleteMapping("/deleteProductdetails/{emailId}")
	public String deleteByEmailId(@PathVariable String emailId) {
		productServices.deleteByEmailID(emailId);
		return "Product details deleted successfully";
	}


	
	// Update by emailid
//	@PutMapping("/updatebyemailid/{emailId}")
//	public ResponseEntity<ProductDetails> updateByEmailId(@PathVariable String emailId,
//	        @RequestBody ProductDetails updatedProductDetails) {
//	    ProductDetails existingProduct = (ProductDetails) productServices.fetchProductDetailsByEmailId(emailId);
//
//	    if (existingProduct != null) {
//	        // Update the fields of existingProduct with the fields from updatedProductDetails
//	        existingProduct.setEmailId(updatedProductDetails.getEmailId());
//	        existingProduct.setProductName(updatedProductDetails.getProductName());
//	        existingProduct.setPrice(updatedProductDetails.getPrice());
//	        existingProduct.setDate(updatedProductDetails.getDate());
//	        existingProduct.setGst(updatedProductDetails.getGst()); // Update GST field
//
//	        // Calculate priceWithGST and totalBill
//	        double priceWithGST = existingProduct.getPrice() * (existingProduct.getGst() / 100);
//	        double totalBill = existingProduct.getPrice() + priceWithGST;
//	        existingProduct.setPriceWithGST(priceWithGST);
//	        existingProduct.setTotalBillRs(totalBill + " Rs");
//
//	        // Save the updated product details
//	        ProductDetails updatedProduct = productServices.saveProductData(existingProduct);
//
//	        return ResponseEntity.ok().body(updatedProduct);
//	    } else {
//	        return ResponseEntity.notFound().build();
//	    }
//	}
	
	
//	@PutMapping("/updatebyemailid/{emailId}")
//	public ResponseEntity<List<ProductDetails>> updateByEmailId(@PathVariable String emailId,
//	        @RequestBody ProductDetails updatedProductDetails) {
//	    List<ProductDetails> existingProducts = productServices.fetchProductDetailsByEmailId(emailId);
//
//	    if (existingProducts != null && !existingProducts.isEmpty()) {
//	        for (ProductDetails existingProduct : existingProducts) {
//	            // Update the fields of existingProduct with the fields from updatedProductDetails
//	            existingProduct.setEmailId(updatedProductDetails.getEmailId());
//	            existingProduct.setProductName(updatedProductDetails.getProductName());
//	            existingProduct.setPrice(updatedProductDetails.getPrice());
//	            existingProduct.setDate(updatedProductDetails.getDate());
//	            existingProduct.setGst(updatedProductDetails.getGst()); // Update GST field
//
//	            // Calculate priceWithGST and totalBill
//	            double priceWithGST = existingProduct.getPrice() * (existingProduct.getGst() / 100);
//	            double totalBill = existingProduct.getPrice() + priceWithGST;
//	            existingProduct.setPriceWithGST(priceWithGST);
//	            existingProduct.setTotalBillRs(totalBill + " Rs");
//
//	            // Save the updated product details
//	            productServices.saveProductData(existingProduct);
//	        }
//
//	        return ResponseEntity.ok().body(existingProducts);
//	    } else {
//	        return ResponseEntity.notFound().build();
//	    }
//	}
	
	@PutMapping("/updatebyemailidandproductid/{emailId}")
    public ResponseEntity<ProductDetails> updateByEmailIdAndProductId(
            @PathVariable String emailId,
            @PathVariable String productId,
            @RequestBody ProductDetails updatedProductDetails) {

        // Find the specific product by emailId and productId
        ProductDetails existingProduct = productServices.updateProductDataByEmailIdAndProductId(emailId, productId, updatedProductDetails);

        if (existingProduct != null) {
            return ResponseEntity.ok().body(existingProduct);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
	
	
	//get by email and product id
	@GetMapping("/getbyEmailAndProduct/{productId}/{emailId}")
	public List<ProductDetails> getByEmailAndProductId(@PathVariable String productId, @PathVariable String emailId)
	{
		return productServices.getProductDetailsByEmailIdAndProductId(productId, emailId);
	}


}
