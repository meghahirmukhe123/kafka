package com.ProductDetails.kafka;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;

import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.IdentityService.dto.event;

//@Service
//public class eventConsumer { 
//
//private static final Logger logger= LoggerFactory.getLogger(eventConsumer.class);
//	
//	
//	//following method is to subscribe kafka topic
//	@KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id}")
//	public void consume(com.IdentityService.dto.event ev)
//	{
//		logger.info(String.format(" \"Received Kafka message: ", ev.toString()));
//		
//		
//	}
//}

@Service
public class eventConsumer { 

    private static final Logger logger = LoggerFactory.getLogger(eventConsumer.class);

//    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id}")
//    public void consume(com.IdentityService.dto.event ev) {
//        logger.info("Received Kafka message: " + ev.toString());
//        // Your message handling logic here
//    }
    
    @KafkaListener(topics = "${spring.kafka.topic.name}", groupId = "${spring.kafka.consumer.group-id}")
    public void consume(ConsumerRecord<String, String> record) {
        String key = record.key();
        String value = record.value();

        if (value != null) {
            if (key != null && key.equals("event")) {
                // Handle com.IdentityService.dto.event message
                com.IdentityService.dto.event event = objectMapper.readValue(value, com.IdentityService.dto.event.class);
                logger.info("Received com.IdentityService.dto.event message: " + event.toString());
                // Process event message here
            } else {
                // Handle other string messages
                logger.info("Received string message: " + value);
                // Process string message here
            }
        }
    }


}

